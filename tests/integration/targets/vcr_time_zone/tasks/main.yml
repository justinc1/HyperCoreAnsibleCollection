---
# pip install vcrpy
# pip install git+https://github.com/justinc1/vcr-stub-server@sequential-replay  # pip install vcr-stub-server
# ansible-test integration --local vcr_time_zone -v
# ansible-test integration --local vcr_time_zone -v
# - is run in temp directory, cassete is deleted
- environment:
    # SC_HOST: "{{ sc_host }}"
    SC_USERNAME: "{{ sc_username }}"
    SC_PASSWORD: "{{ sc_password }}"
    # https://vcrpy.readthedocs.io/en/latest/usage.html#record-modes

#    SC_HOST: "https://10.5.11.50"
#    PYVCR_RECORD_MODE: "all"

    SC_HOST: "http://127.0.0.2:8080"
    PYVCR_RECORD_MODE: "none"
    # vcr-stub-server path/to/vcr_cassette.yml

  vars:
    time_zone_a: "Europe/Ljubljana"
    time_zone_b: "Europe/Zagreb"
    actual_uuid: "timezone_guid"

  block:
    # -------------------------------------------------------------
    # prepare - pyvcr
    - name: set var/fact pyvcr_record_mode A
      ansible.builtin.shell: echo $PYVCR_RECORD_MODE
      register: pyvcr_record_mode_result

    - name: set var/fact pyvcr_record_mode B
      ansible.builtin.set_fact:
        pyvcr_record_mode: "{{ pyvcr_record_mode_result.stdout }}"

    # otherwise, new request are appended
    - name: rm /tmp/synopsis2.yaml if PYVCR_RECORD_MODE==all
      ansible.builtin.file:
        path: /tmp/synopsis2.yaml
        state: absent
      when: pyvcr_record_mode == "all"

    - name: Start vcr-stub-server
      # sed -i /tmp/synopsis2.yaml -e 's|https://10.5.11.50/|http://127.0.0.2:8080/|' -e 's|10.5.11.50|127.0.0.2|'
      # ansible.builtin.command: vcr-stub-server /tmp/synopsis2.yaml
      # ansible.builtin.shell: sudo ip a add dev lo 10.5.11.50/32; sudo echo {{ ansible_python_interpreter | dirname  }}/vcr-stub-server -b 10.5.11.50/32 -p 80 /tmp/synopsis2.yaml
      ansible.builtin.shell: |
        sed -i /tmp/synopsis2.yaml -e 's|https://10.5.11.50/|http://127.0.0.2:8080/|' -e 's|10.5.11.50|127.0.0.2|' ;
        {{ ansible_python_interpreter | dirname  }}/vcr-stub-server -b 127.0.0.2 -p 8080 /tmp/synopsis2.yaml ;
      async: 300
      poll: 0
      register: vcr_server_result
      when: pyvcr_record_mode == "none"

    # -------------------------------------------------------------
    # prepare - cleanup
    - name: Remove TimeZone object
      scale_computing.hypercore.api:
        action: delete
        endpoint: /rest/v1/TimeZone/timezone_guid

    # -------------------------------------------------------------
    # test
    - name: Get time_zone
      scale_computing.hypercore.api:
        action: get
        endpoint: /rest/v1/TimeZone
      register: time_zone_result
    - ansible.builtin.assert:
        that:
          - time_zone_result.changed == False
          - time_zone_result.record | length == 0

    - name: Get time_server
      scale_computing.hypercore.api:
        action: get
        endpoint: /rest/v1/TimeSource
      register: time_server_result
    - ansible.builtin.assert:
        that:
          - time_server_result.changed == False
          - time_server_result.record[0].host == "pool.ntp.org"

    # This does TaskTag.wait() - sleep ~ 10 sec.
    - name: Create TimeZone object
      scale_computing.hypercore.time_zone:
        zone: "{{ time_zone_a }}"
      register: result
      # on replay: changed: [testhost] => {"changed": true, "record": {}}
    - scale_computing.hypercore.time_zone_info:
      register: info
    # replay+assert fails here. fork of vcr-stub-server needed.
    - ansible.builtin.assert:
        that:
          - result.changed == True
          - result.diff.before != result.diff.after
          - info.record.time_zone == time_zone_a
          - info.record.uuid == actual_uuid

    # - name: Create TimeZone object - idempotence

    - name: Change time zone
      scale_computing.hypercore.time_zone:
        zone: "{{ time_zone_b }}"
      register: result
    - scale_computing.hypercore.time_zone_info:
      register: info
    - ansible.builtin.assert:
        that:
          - result.changed == True
          - result.diff.before != result.diff.after
          - info.record.time_zone == time_zone_b
          - info.record.uuid == actual_uuid

    # - name: Change time zone - idempotence

    # -------------------------------------------------------------
    # cleanup/revert
    - name: Revert TimeZone object
      scale_computing.hypercore.api:
        action: post
        endpoint: /rest/v1/TimeZone
        data:
          timeZone: US/Eastern

    - name: Stop vcr-stub-server
      ansible.builtin.shell: killall vcr-stub-server
      when: pyvcr_record_mode == "none"
