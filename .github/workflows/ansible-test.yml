---
name: Ansible test
on:
  push:
#    paths:
#      - "meta/**"
#      - "plugins/**"
#      - "roles/**"
#      - "tests/**"
#      - "*requirements*"
#      - "*.py"
#      - "*ansible*"
  # pull_request:
  schedule:
    - cron: "0 6 * * *"
env:
  NAMESPACE: scale_computing
  COLLECTION_NAME: hypercore
  # ANSIBLE_TEST_PREFER_PODMAN: 1
jobs:
  sanity:
    name: sanity test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Perform sanity testing with ansible-test
        uses: ansible-community/ansible-test-gh-action@release/v1
        with:
          ansible-core-version: stable-2.14
          target-python-version: 3.11
          testing-type: sanity

  get_matrix:
    outputs:
      version_matrix: ${{ steps.set-matrix.outputs.version_matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - run: python -c "import json, yaml; print('version_matrix=' + json.dumps(yaml.safe_load(open('.github/workflows/files/ansible-test-units-matrix.yml'))))"
      - id: set-matrix
        name: set version_matrix output
        # run: echo "::set-output name=matrix::{\"node\":[10, 12, 14]}"
        run: python -c "import json, yaml; print('version_matrix=' + json.dumps(yaml.safe_load(open('.github/workflows/files/ansible-test-units-matrix.yml'))))"  >> $GITHUB_OUTPUT
      - run: cat $GITHUB_OUTPUT

  units:
    needs: get_matrix
    name: units ${{ matrix.ansible }}-py${{ matrix.python }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.get_matrix.outputs.version_matrix) }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Perform units testing with ansible-test
        uses: ansible-community/ansible-test-gh-action@release/v1
        with:
          ansible-core-version: ${{ matrix.ansible }}
          target-python-version: ${{ matrix.python }}
          testing-type: units

  integ-tmp:
    name: integ-node_info
    strategy:
      fail-fast: false
      matrix:
        include:
          - ansible: "stable-2.13"
            python: "3.10"
            test_target: node_info
    runs-on: self-hosted2
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Create integration_config.yml
        run: |
          echo "${{ vars.CI_CONFIG_HC_IP50 }}" > tests/integration/integration_config.yml
          cat tests/integration/integration_config.yml
          echo "sc_password: ${{ secrets.CI_CONFIG_HC_IP50_SC_PASSWORD }}" >> tests/integration/integration_config.yml
          echo "smb_password: ${{ secrets.CI_CONFIG_HC_IP50_SMB_PASSWORD }}" >> tests/integration/integration_config.yml
          echo "sc_replication_dest_password: ${{ secrets.CI_CONFIG_HC_IP50_SC_REPLICATION_DEST_PASSWORD }}" >> tests/integration/integration_config.yml
          ls -al tests/integration/integration_config.yml
      - name: Commit integration_config.yml for ansible-test
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add -f tests/integration/integration_config.yml
          git commit -m "Added integration_config.yml"
          echo "GIT_NEW_HEAD_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - name: Perform integration testing with ansible-test
        uses: ansible-community/ansible-test-gh-action@release/v1
        with:
          ansible-core-version: ${{ matrix.ansible }}
          target-python-version: ${{ matrix.python }}
          # controller-python-version: ${{ matrix.python }}
          testing-type: integration
          target: ${{ matrix.test_target }}
          test-deps: >-
            community.crypto
          pre-test-cmd: ls -al tests/integration
          # git-checkout-ref: ${{ env.GIT_NEW_HEAD_SHA }}
          collection-src-directory: .
    # python: command not found
    # fix: apt-get install python-is-python3
